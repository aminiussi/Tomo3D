#!/usr/bin/env bash

INPUT=""
NB_THREADS=""
MPI_PREFIX=""

while getopts "s:b:p:t:" OPTS
do
    case $OPTS in
	s)
	    INPUT=$OPTARG
	    ;;
	b)
	    BINDIR=$OPTARG
	    ;;
	p)
	    MPI_PREFIX=$OPTARG
	    ;;
	t)
	    NB_THREADS=$OPTARG
	    ;;
	\?)
	    exit -1
	    ;;
	:)
	    echo "$0: unsupported option $OPTARG"
	    exit -1
	    ;;
    esac
done

if [[ ! -d $INPUT ]]; then
    echo "input directory $INPUT not found. Goodbye!"
    exit 1
fi

if [[ -z "$NB_THREADS" ]]; then
    echo "number of thread not provided, will use 2"
    NB_THREADS=2
else
    echo "will use $NB_THREADS threads"
fi

MODEL=recover/models
TIMES=recover/times
INTRFC=recover/reflectors
PHASE=both
FOLDER=both0to_2_2D
OUTPUT=$BINDIR/output
mkdir -p $OUTPUT
cp $0 $OUTPUT/$(basename $0) 

# Input files

SMESH=$INPUT/velmodinv0_2D.dat		# Input velocity grid
REFL=$INPUT/rec2refl_2D.out		# Reflector geometry file (Moho)
DATA=$INPUT/tt3dbothto_2D.dat		# Input travel time data file (observed picks)
#DAMP=$OUTPUT/			# Damping file

# Output files

LOG_FILE=$OUTPUT/$FOLDER.log		# Log file
OUT_FILE=$OUTPUT/$FOLDER.out		# Output file
PREFIX=$OUTPUT/$FOLDER		# Prefix for all output files
MASK=$OUTPUT/dws.dat			# DWS output file

# Ray-trace parameters

XORDER=1	# Degree of forward star in X direction
YORDER=4	# Degree of forward star in Y direction
ZORDER=4	# Degree of forward star in Z direction
CLEN=0.8	# Critical length (km) for beta spline. Must be > velocity node spacing.
NINTP=8 	# Number of interpolations in beta spline
TOT1=1e-4	# Tolerance in bending refinement (set to 1/10 of desired tt resolution)
TOT2=1e-6	# Line minimization

# Inversion parameters

CRIT_CHI=15	# Eliminate data outliers with chi values greater than this number.
LSQR_TOL=1e-4	# Tolerance level to terminate inversion.
D_WEIGHT=1	# Relative weighting of Pg and PmP (1=equal, 0=only uses Pg, 10=PmP more important than Pg)
MAX_DV=10	# Damping in velocity (%)
MAX_DD=10	# Damping in depth (%)

TYPE=1		# Type of inversion.	1 = Many iterations with a single set of parameters
		#			2 = Single iteration with many sets of parameters

NITER=15	# TYPE = 1 : Number of iterations
WSV=100		# TYPE = 1 : Velocity smoothing parameter
WSD=100		# TYPE = 1 : Depth smoothing parameter

WSV_MIN=0	# TYPE = 2 : Minimum velocity smoothing parameter
WSV_MAX=3	# TYPE = 2 : Maximum velocity smoothing parameter
WSD_MIN=0	# TYPE = 2 : Minimum depth smoothing parameter
WSD_MAX=3	# TYPE = 2 : Maximum depth smoothing parameter
DW=1		# TYPE = 2 : Increment of smoothing parameter
POWER10=y	# TYPE = 2 : If "y", the smoothing increment will be by powers of ten (if not, linear)

# Correlation length files:

CORR_V=$OUTPUT/corr_v.$FOLDER
CORR_D=$OUTPUT/corr_d.$FOLDER

rm -f $COOR_V $COOR_D
# Correlation length parameters

XMIN=2.5			# Left end of the model (km)
XMAX=2.5			# Right end of the model (km)
YMIN=0.			# Front end of the model (km)
YMAX=5.			# Back end of the model (km)
ZMIN=0.			# Top of the model (km)
ZMAX=3.			# Bottom of the model (km)
LX_TOP=0.		# X-direction correlation length at the TOP
LX_BOT=0.		# X-direction correlation length at the BOTTOM
LY_TOP=3.		# Y-direction correlation length at the TOP
LY_BOT=5.		# Y-direction correlation length at the BOTTOM
LV_TOP=3.		# Vertical correlation length at the TOP
LV_BOT=5.		# Vertical correlation length at the BOTTOM
LXR=0.			# X-direction correlation length for the reflector (=LX_BOT ??)
LYR=0.5			# Y-direction correlation length for the reflector (=LY_BOT ??)

# Other options

FLAGS=" -s -o2 -V --nb-threads $NB_THREADS --placement" 
rm $CORR_V $CORR_D

#--------- NO - MORE - CHANGES - BELOW - THIS - LINE ------------------------

# 2-D correlation lengths
cat > $CORR_V <<END
1    2    2
$XMIN
$YMIN $YMAX
0    0
$ZMIN $ZMAX
$LX_TOP $LX_BOT
$LX_TOP $LX_BOT
$LY_TOP $LY_BOT
$LY_TOP $LY_BOT
$LV_TOP $LV_BOT
$LV_TOP $LV_BOT
END
cat > $CORR_D <<END
1    2
$XMIN $YMIN $LXR $LYR
$XMIN $YMAX $LXR $LYR
END

N=$XORDER/$YORDER/$ZORDER/$CLEN/$NINTP/$TOT1/$TOT2

if [ "$TYPE" = "1" ] ; then
  ARG=" -I$NITER -SV$WSV -SD$WSD "
elif [ "$TYPE" = "2" ] ; then
  X=""
  if [ "$POWER10" = "y" ] ; then
    X=" -XV -XD "
  fi
  ARG=" -SV$WSV_MIN/$WSV_MAX/$DW -SD$WSD_MIN/$WSD_MAX/$DW $X "
fi

[ -x ../../tt_inverse3d ] || exit 1

set -x 

$MPI_PREFIX ../../tt_inverse3d -M$SMESH -G$DATA -N$N -F$REFL -L$LOG_FILE -O$PREFIX -K$MASK \
    -R$CRIT_CHI -Q$LSQR_TOL -W$D_WEIGHT \
    -TV$MAX_DV -TD$MAX_DD -CV$CORR_V -CD$CORR_D $ARG $FLAGS 
status=$?
#rm $CORR_V $CORR_D

exit $status
